package dev.connectaword.data

import com.google.gson.Gson
import com.google.gson.reflect.TypeToken
import java.io.InputStreamReader

data class WordEntry(
    val id: Int,
    val word: String,
    val length: Int,
    val form: String,
    val frequency: Long,
    val dialect: String?
)

object WordRepository {

    private val englishWords: List<WordEntry>
    // üëá –î–û–î–ê–à–ï–ú–û –õ–ò–°–¢–£ –ó–ê –°–†–ü–°–ö–ï –†–ï–ß–ò üëá
    private val serbianWords: List<WordEntry>

    init {
        val gson = Gson()

        // –£—á–∏—Ç–∞–≤–∞–º–æ –µ–Ω–≥–ª–µ—Å–∫–µ —Ä–µ—á–∏ –∏–∑ —ò–µ–¥–Ω–æ–≥ —Ñ–∞—ò–ª–∞
        englishWords = loadWords(listOf("words_en.json"), gson)

        // üëá –î–ï–§–ò–ù–ò–®–ï–ú–û –õ–ò–°–¢–£ –§–ê–à–õ–û–í–ê –ó–ê –°–†–ü–°–ö–ò –à–ï–ó–ò–ö üëá
        val serbianFiles = listOf(
            "words_sr_1.json",
            "words_sr_2.json"
        )
        // –£—á–∏—Ç–∞–≤–∞–º–æ —Å—Ä–ø—Å–∫–µ —Ä–µ—á–∏ –∏–∑ –æ–±–∞ —Ñ–∞—ò–ª–∞
        serbianWords = loadWords(serbianFiles, gson)

        println("Successfully loaded ${englishWords.size} English words.")
        println("Successfully loaded ${serbianWords.size} Serbian words.")
    }

    private fun loadWords(fileNames: List<String>, gson: Gson): List<WordEntry> {
        val allWords = mutableListOf<WordEntry>()
        val wordListType = object : TypeToken<List<WordEntry>>() {}.type

        for (fileName in fileNames) {
            val inputStream = this::class.java.classLoader.getResourceAsStream(fileName)
            if (inputStream != null) {
                val reader = InputStreamReader(inputStream)
                try {
                    val wordsFromFile: List<WordEntry> = gson.fromJson(reader, wordListType)
                    allWords.addAll(wordsFromFile)
                } catch (e: Exception) {
                    println("ERROR parsing $fileName: ${e.message}")
                } finally {
                    reader.close()
                }
            } else {
                println("ERROR: $fileName not found in resources!")
            }
        }
        return allWords
    }

    /**
     * –†–∞—á—É–Ω–∞ –¥—É–∂–∏–Ω—É —Ä–µ—á–∏ –∑–∞ —Å—Ä–ø—Å–∫–∏ —ò–µ–∑–∏–∫, —Ç—Ä–µ—Ç–∏—Ä–∞—ò—É—õ–∏ –¥–∏–≥—Ä–∞—Ñ–µ (nj, lj, d≈æ) –∫–∞–æ —ò–µ–¥–Ω–æ —Å–ª–æ–≤–æ.
     * –û–≤–∞ —Ñ—É–Ω–∫—Ü–∏—ò–∞ —ò–µ `public` –¥–∞ –±–∏ –±–∏–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —É Game.kt.
     */
    fun getSerbianWordLength(word: String): Int {
        return word.uppercase()
            .replace("D≈Ω", "1")
            .replace("LJ", "1")
            .replace("NJ", "1")
            .length
    }

    fun getFiveRandomWords(language: String): List<String> {
        val wordList = when (language.lowercase()) {
            "english" -> englishWords
            // üëá –î–û–î–ê–à–ï–ú–û –°–†–ü–°–ö–ò –à–ï–ó–ò–ö üëá
            "serbian" -> serbianWords
            else -> {
                println("Language '$language' not supported yet.")
                return emptyList()
            }
        }

        val isSerbian = language.lowercase() == "serbian"

        return wordList
            .filter {
                // –ò–ó–ú–ï–ù–ê: –ö–æ—Ä–∏—Å—Ç–∏–º–æ –Ω–æ–≤—É —Ñ—É–Ω–∫—Ü–∏—ò—É –∑–∞ –¥—É–∂–∏–Ω—É –∞–∫–æ —ò–µ —ò–µ–∑–∏–∫ —Å—Ä–ø—Å–∫–∏
                val wordLength = if (isSerbian) getSerbianWordLength(it.word) else it.length
                it.form == "singular" &&
                        it.id <= 2000 &&
                        wordLength in 5..6 // –§–∏–ª—Ç–µ—Ä —Å–µ —Å–∞–¥–∞ –ø—Ä–∏–º–µ—ö—É—ò–µ –Ω–∞ –∏—Å–ø—Ä–∞–≤–Ω—É –¥—É–∂–∏–Ω—É
            }
            .shuffled()
            .take(5)
            .map { it.word.uppercase() }
    }

    fun isValidGuess(guess: String, language: String): Boolean {
        val wordList = when (language.lowercase()) {
            "english" -> englishWords
            // üëá –î–û–î–ê–à–ï–ú–û –°–†–ü–°–ö–ò –à–ï–ó–ò–ö üëá
            "serbian" -> serbianWords
            else -> return false
        }

        val upperGuess = guess.uppercase()

        return wordList.any { it.word.uppercase() == upperGuess }
    }
}